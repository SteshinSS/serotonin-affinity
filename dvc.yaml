stages:
  filter:
    cmd: >-
      python scripts/preprocessing/filter.py
      --threshold=${filter.threshold}
      --keep_null=${filter.keep_null}
      data/raw/smiles.tsv.gz
      data/raw/activities.tsv.gz
      data/filtered/filtered.csv
    deps:
      - data/raw/activities.tsv.gz
      - data/raw/smiles.tsv.gz
      - scripts/preprocessing/filter.py
    outs:
      - data/filtered
  
  split:
    cmd: >-
      python scripts/preprocessing/split.py
      --test_ratio=${split.test_ratio}
      --val_ratio=${split.val_ratio}
      --homology_based ${split.homology_based}
      --random_seed ${split.random_seed}
      data/filtered/filtered.csv
      data/splitted
    deps:
      - data/filtered
      - scripts/preprocessing/split.py
    outs:
      - data/splitted
  
  featurize_topological_fp:
    cmd: >-
      python scripts/preprocessing/featurize_topological_fp.py
      data/splitted
      data/features/fingerprints/topological
    deps:
      - data/splitted
      - scripts/preprocessing/featurize_topological_fp.py
    outs:
      - data/features/fingerprints/topological

  featurize_morgan_fp:
    cmd: >-
      python scripts/preprocessing/featurize_morgan_fp.py
      --radius=${featurize_morgan_fp.radius}
      --n_bits=${featurize_morgan_fp.n_bits}
      data/splitted
      data/features/fingerprints/morgan
    deps:
      - data/splitted
      - scripts/preprocessing/featurize_morgan_fp.py
    outs:
      - data/features/fingerprints/morgan
  
  featurize_maccs_fp:
    cmd: >-
      python scripts/preprocessing/featurize_maccs_fp.py
      data/splitted
      data/features/fingerprints/maccs
    deps:
      - data/splitted
      - scripts/preprocessing/featurize_maccs_fp.py
    outs:
      - data/features/fingerprints/maccs
  
  train_gb_topological_fp:
    cmd: >-
      python scripts/training/train_gb.py
      --subsample=${train_gb.subsample}
      --n_estimators=${train_gb.n_estimators}
      --max_depth=${train_gb.max_depth}
      --use_weights=${train_gb.use_weights}
      data/features/fingerprints/topological/train.npz
      models/gb_topological_fp/model.pkl
    deps:
      - data/features/fingerprints/topological/train.npz
      - scripts/training/train_gb.py
    outs:
      - models/gb_topological_fp/model.pkl
  
  evaluate_gb_topological_fp:
    foreach:
      - train
      - val
    do:
      cmd: >-
        python scripts/evaluation/eval_gb.py
        models/gb_topological_fp/model.pkl
        data/features/fingerprints/topological/${item}.npz
        results/gb_topological_fp/${item}.json
      deps:
        - scripts/evaluation/eval_gb.py
        - models/gb_topological_fp/model.pkl
        - data/features/fingerprints/topological/${item}.npz
      metrics:
        - results/gb_topological_fp/${item}.json


  train_gb_morgan_fp:
    cmd: >-
      python scripts/training/train_gb.py
      --subsample=${train_gb.subsample}
      --n_estimators=${train_gb.n_estimators}
      --max_depth=${train_gb.max_depth}
      --use_weights=${train_gb.use_weights}
      data/features/fingerprints/morgan/train.npz
      models/gb_morgan_fp/model.pkl
    deps:
      - data/features/fingerprints/morgan/train.npz
      - scripts/training/train_gb.py
    outs:
      - models/gb_morgan_fp/model.pkl

  evaluate_gb_morgan_fp:
    foreach:
      - train
      - val
    do:
      cmd: >-
        python scripts/evaluation/eval_gb.py
        models/gb_morgan_fp/model.pkl
        data/features/fingerprints/morgan/${item}.npz
        results/gb_morgan_fp/${item}.json
      deps:
        - scripts/evaluation/eval_gb.py
        - models/gb_morgan_fp/model.pkl
        - data/features/fingerprints/morgan/${item}.npz
      metrics:
        - results/gb_morgan_fp/${item}.json

  train_gb_maccs_fp:
    cmd: >-
      python scripts/training/train_gb.py
      --subsample=${train_gb.subsample}
      --n_estimators=${train_gb.n_estimators}
      --max_depth=${train_gb.max_depth}
      --use_weights=${train_gb.use_weights}
      data/features/fingerprints/maccs/train.npz
      models/gb_maccs_fp/model.pkl
    deps:
      - data/features/fingerprints/maccs/train.npz
      - scripts/training/train_gb.py
    outs:
      - models/gb_maccs_fp/model.pkl

  evaluate_gb_maccs_fp:
    foreach:
      - train
      - val
    do:
      cmd: >-
        python scripts/evaluation/eval_gb.py
        models/gb_maccs_fp/model.pkl
        data/features/fingerprints/maccs/${item}.npz
        results/gb_maccs_fp/${item}.json
      deps:
        - scripts/evaluation/eval_gb.py
        - models/gb_maccs_fp/model.pkl
        - data/features/fingerprints/maccs/${item}.npz
      metrics:
        - results/gb_maccs_fp/${item}.json
  
  generate_conformers:
    cmd: >-
      python scripts/preprocessing/generate_conformers.py
      data/splitted
      data/conformers
    deps:
      - data/splitted
      - scripts/preprocessing/generate_conformers.py
    outs:
      - data/conformers
  
  generate_voxels:
    cmd: >-
      python scripts/preprocessing/generate_voxels.py
      --voxel_size=${generate_voxels.voxel_size}
      --box_size_x=${generate_voxels.box_size_x}
      --box_size_y=${generate_voxels.box_size_y}
      --box_size_z=${generate_voxels.box_size_z}
      data/conformers
      data/features/voxels
    deps:
      - data/conformers
      - scripts/preprocessing/generate_voxels.py
    outs:
      - data/features/voxels
  
  train_cnn:
    cmd: >-
      python scripts/training/train_cnn.py
      --batch_size=${train_cnn.batch_size}
      --learning_rate=${train_cnn.learning_rate}
      --l2_lambda=${train_cnn.l2_lambda}
      --dropout=${train_cnn.dropout}
      --seed=${train_cnn.seed}
      data/features/voxels
      models/cnn/model.ckpt
    deps:
      - data/features/voxels
      - scripts/training/train_cnn.py
    outs:
      - models/cnn/model.ckpt
    
  evaluate_cnn:
    foreach:
      - train
      - val
    do:
      cmd: >-
        python scripts/evaluation/eval_cnn.py
        models/cnn/model.ckpt
        data/features/voxels/${item}.npz
        results/cnn/${item}.json
      deps:
        - models/cnn/model.ckpt
        - data/features/voxels/${item}.npz
      metrics:
        - results/cnn/${item}.json
